<Version=1.0>
<Shader=
	<Input=
		<Attribute=<Name="a_uv"><Semantic="UV0">>
		<Attribute=<Name="a_position"><Semantic="Position">>
		<Attribute=<Name="a_normal"><Semantic="Normal">>

		<Uniform=<Name="t_tex0"><Semantic="MaterialTexture0">>
		<Uniform=<Name="u_diffuse_color"><Semantic="MaterialDiffuse">>
		<Uniform=<Name="u_self_color"><Semantic="MaterialSelf">>
		<Uniform=<Name="u_ambient_color"><Semantic="MaterialAmbient">>

		<Uniform=<Name="u_ibs"><Semantic="InverseBufferSize"><Scope=<Pixel>>>
	>
	<Varying=
		<Variable=<Name="v_uv"><Type="vec2">>
		<Variable=<Name="v_pos"><Type="vec3">>
		<Variable=<Name="v_normal"><Type="vec3">>
	>
	<VertexSource="
// Send the untransformed vertex position to the pixel shader so that it may determine the pixel position in the primitive.
v_normal = a_normal;
v_uv = a_uv;
%position% = vec4(a_position, 1.0);
	">
	<PixelSource="
vec2 ss_uv = %in.fragcoord%.xy * u_ibs;
vec4 _fbuffer = vec4(0,0,0,0);
float blur_width = u_ambient_color.y / u_ambient_color.x * 12.0;

float x, y, n = 0.0;
float blur_rad = 0.01 * u_diffuse_color.x * u_diffuse_color.x;
for(x = -1.0; x < 1.0; x += 0.1)
	for(y = -1.0; y < 1.0; y += 0.1)
	{
		_fbuffer += texture2D(t_tex0, v_uv + vec2(x * blur_width, y) * blur_rad);
		n += 1.0;
	}

_fbuffer /= n;

float cc = (_fbuffer.x + _fbuffer.y + _fbuffer.z) * 0.33333333;
cc = (max(cc, 0.5) - 0.5) * 2.0;

_fbuffer = _fbuffer * 0.5 * u_self_color.x + vec4(cc,cc,cc,0.0) * 2.0;

// Output the frame buffer texture offseted by the FX.
%diffuse% = vec4(0,0,0,0) * u_self_color.x;
%constant% = _fbuffer;
	">
>
